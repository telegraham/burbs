require_relative 'environment'

desc "console with the environment loaded"
task :console do
  Pry.start
end

desc "list words and their containing suburbs"
task :list do
  require_relative 'runner'
  puts ""
  Word.shared.sort.each do |word|
    puts word.to_s.titleize.yellow
    puts "  " + word.burbs.sort.map(&:to_s).map(&:blue).join("\r\n  ")
    puts ""
  end
end

desc "list possible words"
task :possible do
  require_relative 'runner'
  puts ""
  Word.possible_words_from_syllables.to_a.sort_by do |arr|
    arr.last.length * -1
  end.each do |arr|
    word = arr.first
    usages = arr.last
    puts word.to_s.yellow
    puts "  " + usages.sort.map(&:to_s).map(&:blue).join("\r\n  ")
    puts ""
  end
end

desc "load suburbs and pry"
task :load do
  require_relative 'runner'
  Pry.start
end

def print_recursively(words, method, tab_depth=0)
  words.each do |word|
    puts ("   " * tab_depth) + word.to_s.send(String.colors[tab_depth + 1])
    embedded = word.send(method)
    print_recursively(embedded, method, tab_depth + 1) if embedded.length > 0
  end
end

task :embedded do
  require_relative 'runner'
  print_recursively(Word.all, :embedded)
end

task :containers do
  require_relative 'runner'
  print_recursively(Word.all, :containers)
end

namespace :halfviz do

  desc "halfviz: words and burbs are nodes"
  task :full do
    require_relative 'runner'
    Word.shared.sort.each do |word|
      puts "#{ word } { color: #c6531e }"
      word.burbs.each do |burb|
        puts "#{ burb } { color: #95cde5 }"
        puts "#{ burb } -> #{ word }"
      end
    end
  end

  desc "halfviz: words are nodes and burbs are edges"
  task :words do
    require_relative 'runner'
    Burb.sharing.sort.each do |burb|
      puts "; #{ burb }"
      puts burb.to_edges
    end
  end

  desc "halfviz: burbs are nodes and words are edges"
  task :burbs do
    require_relative 'runner'
    # Word.shared.sort.each do |word|
    #   puts "; #{ burb }"
    #   puts burb.to_edges
    # end
  end

end